import React, { useEffect } from "react";
import { api } from "@/utils/api";
import useScrollPosition from "hooks/useScrollPosition";
import { useRouter } from "next/router";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Body from "@/components/Body";
import SearchHeader from "@/components/SearchHeader";
import Loader from "@/components/Loader";
import PeopleComponent from "@/components/PeopleComponent";
import { v4 } from "uuid";
import { TweetWithUser } from "interface";
import TweetList from "@/components/TweetList";
import NoResults from "@/components/NoResults";

const SearchPage = () => {
  const router = useRouter();

  // http://localhost:3000/search?f=top&q=nikitenko
  const { q, f } = router.query;

  const { data: searchUsers, isLoading: isUserLoading } =
    api.user.searchUsers.useQuery({
      term: q as string,
    });

  const scrollPosition = useScrollPosition();

  const { data, isLoading, isFetching, hasNextPage, fetchNextPage } =
    api.tweet.searchTweets.useInfiniteQuery(
      {
        limit: 10,
        term: q as string,
        filtering: f as string,
      },
      {
        getNextPageParam: (lastPage) => lastPage?.nextCursor,
      }
    );

  useEffect(() => {
    if (scrollPosition > 90 && hasNextPage && !isFetching) {
      fetchNextPage();
    }
  }, [scrollPosition, isFetching, hasNextPage, fetchNextPage]);

  const tweets = data?.pages.flatMap((page) => page?.tweets) ?? [];
  const { data: session, status } = useSession();

  return (
    <Body>
      <Head>
        <title>{q} - UA You</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SearchHeader />
      {router.query.f !== "people" ? (
        <>{isLoading ? <Loader /> : null}</>
      ) : (
        <>{isLoading ? <Loader /> : null}</>
      )}
      {router.query.f !== "people" ? (
        <>
          {tweets?.length === 0 && !isFetching ? (
            <NoResults />
          ) : (
            <>
              <TweetList key={v4()} tweets={tweets as TweetWithUser[]} />
            </>
          )}
        </>
      ) : (
        <>
          {searchUsers?.length === 0 ? (
            <NoResults />
          ) : (
            <>
              {searchUsers?.map((user) => (
                <PeopleComponent user={user} key={v4()} />
              ))}
            </>
          )}
        </>
      )}
      {isFetching && hasNextPage ? (
        <div className="pb-16">
          <Loader />
        </div>
      ) : null}
    </Body>
  );
};

export default SearchPage;
